/* Generated by Yosys 0.22+4 (git sha1 0e13d7e4c, x86_64-w64-mingw32-g++ 9.2.1 -Os) */

module exe_unit_w15_rtl(i_oper, i_argA, i_argB, i_clk, i_rsn, o_result, o_status);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  input [3:0] i_argA;
  wire [3:0] i_argA;
  input [3:0] i_argB;
  wire [3:0] i_argB;
  input i_clk;
  wire i_clk;
  input [1:0] i_oper;
  wire [1:0] i_oper;
  input i_rsn;
  wire i_rsn;
  output [3:0] o_result;
  reg [3:0] o_result = 4'h0;
  output [3:0] o_status;
  wire [3:0] o_status;
  wire [3:0] s_result;
  wire [3:0] s_status;
  assign _000_ = ~i_argB[2];
  assign _001_ = ~i_argB[1];
  assign _002_ = ~i_argB[0];
  assign _003_ = ~i_argB[3];
  assign _004_ = ~i_oper[0];
  assign _005_ = ~i_oper[1];
  assign _006_ = ~i_argA[3];
  assign _007_ = i_oper[0] & i_oper[1];
  assign _008_ = i_argB[1] | i_argB[0];
  assign _009_ = _000_ & _003_;
  assign _010_ = _008_ & _009_;
  assign _011_ = i_oper[1] & _010_;
  assign _012_ = _007_ | _011_;
  assign _013_ = i_argA[0] & _012_;
  assign _014_ = _001_ & i_argA[1];
  assign _015_ = _002_ & i_argA[0];
  assign _016_ = _014_ | _015_;
  assign _017_ = _000_ | i_argA[2];
  assign _018_ = _001_ | i_argA[1];
  assign _019_ = _017_ & _018_;
  assign _020_ = _016_ & _019_;
  assign _021_ = i_argB[3] & _006_;
  assign _022_ = _000_ & i_argA[2];
  assign _023_ = _021_ | _022_;
  assign _024_ = _020_ | _023_;
  assign _025_ = i_argB[3] | _006_;
  assign _026_ = i_oper[0] & _005_;
  assign _027_ = _025_ & _026_;
  assign _028_ = _024_ & _027_;
  assign s_result[0] = _013_ | _028_;
  assign _029_ = i_argB[1] | _002_;
  assign _030_ = _004_ & i_oper[1];
  assign _031_ = _029_ & _030_;
  assign _032_ = i_argA[1] & _031_;
  assign _033_ = _010_ & _032_;
  assign _034_ = i_argA[0] & i_argA[3];
  assign _035_ = i_argA[1] ^ _034_;
  assign _036_ = _007_ & _035_;
  assign s_result[1] = _033_ | _036_;
  assign _037_ = _009_ & _030_;
  assign _038_ = i_argB[0] & i_argA[2];
  assign _039_ = _037_ & _038_;
  assign _040_ = i_argA[0] | i_argA[1];
  assign _041_ = i_argA[3] & _040_;
  assign _042_ = i_argA[2] ^ _041_;
  assign _043_ = _007_ & _042_;
  assign s_result[2] = _039_ | _043_;
  assign _044_ = i_argA[2] | _040_;
  assign _045_ = _007_ & _044_;
  assign _046_ = i_argB[1] ^ i_argB[0];
  assign _047_ = _037_ & _046_;
  assign _048_ = _045_ | _047_;
  assign s_result[3] = i_argA[3] & _048_;
  assign _049_ = s_result[2] & s_result[3];
  assign _050_ = s_result[2] ^ s_result[3];
  assign _051_ = s_result[0] & s_result[1];
  assign _052_ = s_result[0] ^ s_result[1];
  assign s_status[0] = _050_ ^ _052_;
  assign s_status[2] = _049_ & _051_;
  assign _053_ = i_argB[3] & _005_;
  assign _054_ = i_oper[0] | _053_;
  assign _055_ = _011_ | _054_;
  assign s_status[3] = ~_055_;
  reg \o_status_reg[0]  = 1'h0;
  always @(posedge i_clk)
    if (!i_rsn) \o_status_reg[0]  <= 1'h0;
    else \o_status_reg[0]  <= s_status[0];
  assign o_status[0] = \o_status_reg[0] ;
  reg \o_status_reg[2]  = 1'h0;
  always @(posedge i_clk)
    if (!i_rsn) \o_status_reg[2]  <= 1'h0;
    else \o_status_reg[2]  <= s_status[2];
  assign o_status[2] = \o_status_reg[2] ;
  reg \o_status_reg[3]  = 1'h0;
  always @(posedge i_clk)
    if (!i_rsn) \o_status_reg[3]  <= 1'h0;
    else \o_status_reg[3]  <= s_status[3];
  assign o_status[3] = \o_status_reg[3] ;
  always @(posedge i_clk)
    if (!i_rsn) o_result[0] <= 1'h0;
    else o_result[0] <= s_result[0];
  always @(posedge i_clk)
    if (!i_rsn) o_result[1] <= 1'h0;
    else o_result[1] <= s_result[1];
  always @(posedge i_clk)
    if (!i_rsn) o_result[2] <= 1'h0;
    else o_result[2] <= s_result[2];
  always @(posedge i_clk)
    if (!i_rsn) o_result[3] <= 1'h0;
    else o_result[3] <= s_result[3];
  assign o_status[1] = 1'h0;
  assign s_status[1] = 1'h0;
endmodule
